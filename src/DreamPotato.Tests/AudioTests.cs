
using DreamPotato.Core;
using DreamPotato.Core.SFRs;

namespace DreamPotato.Tests;

public class AudioTests
{
    [Fact]
    public void PulseLength_01()
    {
        // Verify that the pulses generated per cycle are consistent with those generated by reading the duty cycle and synthesizing directly.
        var vmu = new Vmu();
        vmu.Audio.AudioBufferReady += audioBufferReady;

        var cpu = vmu._cpu;
        cpu.Reset();
        cpu.SFRs.Ocr = cpu.SFRs.Ocr with { ClockGeneratorControl = true, SystemClockSelector = Oscillator.Quartz };
        var cpuClockHz = cpu.SFRs.Ocr.CpuClockHz;
        cpu.SFRs.T1Lr = 246;
        cpu.SFRs.T1Lc = 251;
        cpu.SFRs.T1Cnt = new T1Cnt() { ELDT1C = true, T1lRun = true };

        int width = (0xff - cpu.SFRs.T1Lr) * 2;
        for (int i = 0; i < width; i++)
            cpu.Step();

        int widthSamples = width * Audio.SampleRate / cpuClockHz;
        byte[] referencePulse = new byte[widthSamples * 2];
        vmu.Audio.Generate(referencePulse);

        cpu.SFRs.T1Cnt = cpu.SFRs.T1Cnt with { T1lRun = false };
        Audio.AudioBufferReadyEventArgs audioArgs = default;
        Assert.NotNull(audioArgs.Buffer);
        Assert.Equal(referencePulse[0..widthSamples], audioArgs.Buffer[0..widthSamples]);

        void audioBufferReady(Audio.AudioBufferReadyEventArgs args)
        {
            audioArgs = args;
        }
    }
}